[gd_scene load_steps=15 format=3 uid="uid://buwmemilvox0o"]

[ext_resource type="Texture2D" uid="uid://b35qc7h3wshnn" path="res://asset/sprite/ui/mugshot_background.png" id="1_jqa12"]
[ext_resource type="Texture2D" uid="uid://duf3sth0tr448" path="res://asset/sprite/circle.png" id="2_0j1a0"]
[ext_resource type="Texture2D" uid="uid://cofc05u43ip6" path="res://asset/sprite/character/mark_davidson.png" id="3_51iue"]
[ext_resource type="Texture2D" uid="uid://byvshjajis80m" path="res://asset/sprite/ui/table_area.png" id="4_itneh"]
[ext_resource type="Texture2D" uid="uid://by4j1vauy0nwa" path="res://asset/sprite/character/mark_davidson_face.png" id="4_s17c2"]
[ext_resource type="Texture2D" uid="uid://b4j4hk2l2coy5" path="res://asset/sprite/square.png" id="6_0xiln"]
[ext_resource type="Script" path="res://ui/dialog_area.gd" id="7_hfu6n"]
[ext_resource type="PackedScene" uid="uid://c3hm8qfrt1efv" path="res://ui/SubjectDialog.tscn" id="8_1kshn"]
[ext_resource type="PackedScene" uid="uid://but17v4nmtkk8" path="res://ui/InspectorDialog.tscn" id="9_pf5tj"]
[ext_resource type="Texture2D" uid="uid://x0cnt1hy7276" path="res://asset/sprite/ui/audio_transcript.png" id="10_g68p3"]
[ext_resource type="PackedScene" uid="uid://cajp41ks5tyef" path="res://ui/QuestionArea.tscn" id="11_mbsvd"]
[ext_resource type="PackedScene" uid="uid://b024pqofk6p4t" path="res://ui/Passport.tscn" id="12_lew0a"]

[sub_resource type="Shader" id="Shader_ahqtn"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ioefl"]
shader = SubResource("Shader_ahqtn")
shader_parameter/overlay = true
shader_parameter/scanlines_opacity = 0.0
shader_parameter/scanlines_width = 0.0
shader_parameter/grille_opacity = 0.0
shader_parameter/resolution = Vector2(1280, 960)
shader_parameter/pixelate = false
shader_parameter/roll = true
shader_parameter/roll_speed = 2.0
shader_parameter/roll_size = 4.0
shader_parameter/roll_variation = 1.8
shader_parameter/distort_intensity = 0.02
shader_parameter/noise_opacity = 0.4
shader_parameter/noise_speed = 5.0
shader_parameter/static_noise_intensity = 0.06
shader_parameter/aberration = 0.01
shader_parameter/brightness = 1.4
shader_parameter/discolor = true
shader_parameter/warp_amount = 0.2
shader_parameter/clip_warp = false
shader_parameter/vignette_intensity = 0.4
shader_parameter/vignette_opacity = 0.5

[node name="TestScene" type="Node2D"]

[node name="CameraArea" type="Node2D" parent="."]
position = Vector2(160, 384)

[node name="Background" type="Sprite2D" parent="CameraArea"]
position = Vector2(64.5, -159.937)
scale = Vector2(1.34639, 0.705709)
texture = ExtResource("1_jqa12")

[node name="Shadow" type="Sprite2D" parent="CameraArea"]
self_modulate = Color(0, 0, 0, 0.478431)
position = Vector2(56, 48)
scale = Vector2(2.75, 0.5625)
texture = ExtResource("2_0j1a0")

[node name="Subject" type="Sprite2D" parent="CameraArea"]
position = Vector2(48, -40)
scale = Vector2(0.645072, 0.645072)
texture = ExtResource("3_51iue")
offset = Vector2(4.40183, -92.0706)

[node name="Date" type="Label" parent="CameraArea"]
offset_left = 128.0
offset_top = 32.0
offset_right = 246.0
offset_bottom = 50.0
theme_override_colors/font_color = Color(0, 0, 0, 1)
theme_override_font_sizes/font_size = 20
text = "12/02/2000"

[node name="MarkDavidsonFace" type="Sprite2D" parent="CameraArea"]
position = Vector2(-37, 231)
scale = Vector2(3, 3)
texture = ExtResource("4_s17c2")

[node name="CRTShader" type="ColorRect" parent="CameraArea"]
material = SubResource("ShaderMaterial_ioefl")
offset_left = -160.0
offset_top = -384.0
offset_right = 288.0
offset_bottom = 64.0

[node name="BottomCover" type="Sprite2D" parent="CameraArea"]
self_modulate = Color(0, 0, 0, 1)
position = Vector2(64, 224)
scale = Vector2(7, 5)
texture = ExtResource("6_0xiln")

[node name="CRTShader2" type="ColorRect" parent="CameraArea"]
material = SubResource("ShaderMaterial_ioefl")
offset_left = -149.0
offset_top = 79.0
offset_right = 91.0
offset_bottom = 375.0

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="GameUI" type="Control" parent="CanvasLayer"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="DialogArea" type="Control" parent="CanvasLayer/GameUI"]
layout_mode = 1
anchors_preset = 0
offset_left = 448.0
offset_right = 960.0
offset_bottom = 192.0
script = ExtResource("7_hfu6n")
subject_dialog_prefab = ExtResource("8_1kshn")
inspector_dialog_prefab = ExtResource("9_pf5tj")

[node name="TextureRect" type="TextureRect" parent="CanvasLayer/GameUI/DialogArea"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("10_g68p3")
expand_mode = 1

[node name="ScrollContainer" type="ScrollContainer" parent="CanvasLayer/GameUI/DialogArea"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 24.0
offset_top = 8.0
offset_right = -24.0
offset_bottom = -8.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3

[node name="InspectorChat" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer/VBoxContainer" instance=ExtResource("9_pf5tj")]
layout_mode = 2

[node name="SubjectDialog" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer/VBoxContainer" instance=ExtResource("8_1kshn")]
layout_mode = 2

[node name="InspectorChat2" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer/VBoxContainer" instance=ExtResource("9_pf5tj")]
layout_mode = 2

[node name="SubjectDialog2" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer/VBoxContainer" instance=ExtResource("8_1kshn")]
layout_mode = 2

[node name="InspectorChat3" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer/VBoxContainer" instance=ExtResource("9_pf5tj")]
layout_mode = 2

[node name="SubjectDialog3" parent="CanvasLayer/GameUI/DialogArea/ScrollContainer/VBoxContainer" instance=ExtResource("8_1kshn")]
layout_mode = 2

[node name="QuestionArea" parent="CanvasLayer/GameUI" instance=ExtResource("11_mbsvd")]

[node name="WorkingArea" type="Control" parent="CanvasLayer/GameUI"]
layout_mode = 1
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -920.0
offset_top = -576.0
grow_horizontal = 0
grow_vertical = 0

[node name="Background" type="TextureRect" parent="CanvasLayer/GameUI/WorkingArea"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("4_itneh")
expand_mode = 1

[node name="Passport" parent="CanvasLayer/GameUI/WorkingArea" instance=ExtResource("12_lew0a")]
offset_left = 634.0
offset_top = 56.0
offset_right = 898.0
offset_bottom = 384.0

[node name="Control" type="HBoxContainer" parent="CanvasLayer/GameUI/WorkingArea"]
layout_mode = 0
offset_left = 10.0
offset_top = 8.0
offset_right = 212.0
offset_bottom = 56.0
alignment = 1

[node name="Button" type="Button" parent="CanvasLayer/GameUI/WorkingArea/Control"]
layout_mode = 2
text = "Allow"

[node name="Button2" type="Button" parent="CanvasLayer/GameUI/WorkingArea/Control"]
layout_mode = 2
text = "Deny"

[node name="Button3" type="Button" parent="CanvasLayer/GameUI/WorkingArea/Control"]
layout_mode = 2
text = "Emergency"
